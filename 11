import datetime as datetim # Импортируйте необходимые модули

FORMAT = '%H:%M:%S'# Запишите формат полученного времени.
WEIGHT = 75  # Вес.
HEIGHT = 175  # Рост.
K_1 = 0.035  # Коэффициент для подсчета калорий.
K_2 = 0.029  # Коэффициент для подсчета калорий.
STEP_M = 0.65  # Длина шага в метрах.

storage_data = {}  # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
    if len(data) != 2 or None in data:
        return False# Если длина пакета отлична от 2
    else:
        return True
    # или один из элементов пакета имеет пустое значение -
    # функция вернет False, иначе - True.


def check_correct_time(time):
    """Проверка корректности параметра времени."""
    if len(storage_data) != 0 and time <= max(storage_data.keys()):
        return False # Если словарь для хранения не пустой
    else:
        return True
    # и значение времени, полученное в аргументе,
    # меньше или равно самому большому значению ключа в словаре,
    # функция вернет False.
    # Иначе - True 


def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    day_steps = sum(storage_data.values()) + steps# Посчитайте все шаги, записанные в словарь storage_data,
    # прибавьте к ним значение из последнего пакета
    return day_steps# и верните  эту сумму.
    

def get_distance(steps):
    """Получить дистанцию пройденного пути в км."""

    return steps * STEP_M / 1000# исходя из количества шагов и длины шага.


def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""

    
    hours = hours = float(((current_time.hour * 60) + current_time.minute) / 60)#В уроке «Последовательности» вы написали формулу расчета калорий.
    hour = round(hours, 2)
    mean_speed = dist / hour# Перенесите её сюда и верните результат расчётов.
    minutes = float(hours * 60)# Для расчётов вам потребуется значение времени; 
    spent_calories = (0.035*WEIGHT + (mean_speed**2 / HEIGHT) * 0.029*WEIGHT) * minutes# получите его из объекта current_time;
    return spent_calories# переведите часы и минуты в часы, в значение типа float.


def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    # В уроке «Строки» вы описали логику
    # вывода сообщений о достижении в зависимости
    # от пройденной дистанции.
    # Перенесите этот код сюда и замените print() на return.
    if dist >= 6.5:
        achievement = 'Отличный результат! Цель достигнута.'
        return achievement
    elif dist >= 3.9:
        achievement = 'Неплохо! День был продуктивным.'
        return achievement
    elif dist >= 2:
        achievement = 'Маловато, но завтра наверстаем!'
        return achievement
    else:
        achievement = 'Лежать тоже полезно. Главное — участие, а не победа!'
        return achievement
def show_message(time, steps, distance, calories, achiev):
    print(
f'''
Время: {time}.
Количество шагов за сегодня: {steps}.
Дистанция составила {distance:.2f} км.
Вы сожгли {calories:.2f} ккал.
{achiev}
''')

def accept_package(data):
    """Обработать пакет данных."""

    if  check_correct_data(data) is False:# Если функция проверки пакета вернет False
        return 'Некорректный пакет'
    
    else:
        correct_time, current_steps = data # Распакуйте полученные данные.
        pack_time = (datetim.datetime.strptime(correct_time, FORMAT)).time()# Преобразуйте строку с временем в объект типа time.

        if not check_correct_time(correct_time): # Если функция проверки значения времени вернет False                     
            return 'Некорректное значение времени'

        
    day_steps = get_step_day(current_steps)# Запишите результат подсчёта пройденных шагов.
    dist = get_distance(day_steps)# Запишите результат расчёта пройденной дистанции.
    spent_calories = get_spent_calories(dist, pack_time)# Запишите результат расчёта сожжённых калорий.
    achievement = get_achievement(dist) # Запишите выбранное мотивирующее сообщение.
    show_message (pack_time, day_steps, dist, spent_calories, achievement)# Вызовите функцию show_message().
    storage_data[correct_time] = current_steps# Добавьте новый элемент в словарь storage_data.
    return storage_data# Верните словарь storage_data.                 

# Данные для самопроверки.Не удаляйте их.
package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)

accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)
                     
                     
